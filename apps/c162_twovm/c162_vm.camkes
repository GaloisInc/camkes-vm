/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */
#include <autoconf.h>
#include <configurations/vm.h>

component Init0 {
    uses Ethdriver ethdriver;
    VM_INIT_DEF()
}

component Init1 {
    include "vmm/vchan_sharemem.h";
    uses VchanInterface vchan_con;
    uses VchanInitInterface vchan_init;
    consumes VchanEvent vevent;
    dataport vchan_headers_t share_mem;
    VM_INIT_DEF()
}

component VM {
    /* We want to export the time interface up to our main spec */
    provides Timer time_server_timer;
    emits Notifcation time_server_complete;
    /* Also export an interface to the RTC */
    provides RTC rtc_interface;
    /* Export an interface for the shared ethdriver */
    provides Ethdriver ethdriver_interface;
    composition {
        VM_COMPOSITION_DEF()
        VM_PER_VM_COMP_DEF(0)
        VM_PER_VM_COMP_DEF(1)
        /* Ethernet driver that we share to Linux */
        component Ethdriver82580 ethdriver;
        component HWEthDriver82580 HWEthdriver;
        /* Vchan interface for communicating to native tasks */
        component Vchan vchan;
        component HelloWorld hello;
        /* Connect hello to the vchan component */
        connection seL4Notification vchan_event(from vchan.vevent_sv, to hello.vevent);
        connection seL4RPCCall hvchan(from hello.vchan_con, to vchan.vchan_com);
        connection seL4SharedData hvchan_sharemem_0(from hello.share_mem, to vchan.share_mem);
        /* Connect hello and vchan to the serial server (pretend to be vm1) */
        connection seL4RPCCall hserial(from hello.putchar, to serial.vm_putchar);
        connection seL4RPCCall vchanserial(from vchan.putchar, to serial.vm_putchar);
        /* Connect vm1 to the vchan component */
        connection seL4VChanInit vchan_init(from vm1.vchan_init, to vchan.vchan_init);
        connection seL4RPCCall vchan_(from vm1.vchan_con, to vchan.vchan_com);
        connection seL4SharedData vchan_sharemem(from vm1.share_mem, to vchan.share_mem);
        connection seL4GlobalAsynch vchan_event_init(from vchan.vevent_cl, to vm1.vevent);
        /* Export the time server interface up */
        export time_server.the_timer -> time_server_timer;
        export time_server.timer_notification -> time_server_complete;
        /* Export the RTC up */
        export rtc.rtc -> rtc_interface;
        /* Hardware resources for the ethernet driver */
        connection seL4HardwareMMIO ethdrivermmio(from ethdriver.EthDriver, to HWEthdriver.mmio);
        connection seL4IOAPICHardwareInterrupt hwethirq(from HWEthdriver.irq, to ethdriver.irq);
        /* Connect vm0 ethernet to the ethdriver */
        connection seL4Ethdriver ethdriver_con(from vm0.ethdriver, to ethdriver.client);
        /* Export the shared ethdrover */
        export ethdriver.client -> ethdriver_interface;
    }
    configuration {
        VM_CONFIGURATION_DEF()
        VM_PER_VM_CONFIG_DEF(0, 2)
        VM_PER_VM_CONFIG_DEF(1, 3)
        ethdriver.simple = true;
        ethdriver.cnode_size_bits = 12;
        ethdriver.iospaces = "0x11:0x1:0x0:1";
        ethdriver.iospace_id = 0x11;
        ethdriver.pci_bdf = "1:0.1";
        ethdriver.simple_untyped20_pool = 2;
        ethdriver.heap_size = 0;
        HWEthdriver.mmio_paddr = 0xf1a80000;
        HWEthdriver.mmio_size = 0x80000;
        HWEthdriver.irq_attributes = "17,1,1";
        vm0.ethdriver_attributes = "1";
        vm0.ethdriver_global_endpoint = "vm0";
        vm0.ethdriver_badge = "134479872";
        vm0.ethdriver_mac = [06, 00, 00, 11, 12, 13];
        vm0.simple_untyped24_pool = 2;
        vm0.heap_size = 0x10000;
        vm1.simple_untyped24_pool = 2;
        vm0.guest_ram_mb = 80;
        vm1.guest_ram_mb = 80;
        vm1.heap_size = 0x10000;
        hello.putchar_attributes = "1";
        hello.heap_size = 4096;
        vchan.putchar_attributes = "1";
        vchan.vevent_cl_badge = VAR_STRINGIZE(VM_PIC_BADGE_VCHAN_HAS_DATA);
        vchan.vevent_cl_global_endpoint = "vm1";
        vchan.heap_size = 4096;
        vm1.vchan_init_domain = 0;
        vm1.vchan_init_dataport = "share_mem";
        vm1.vchan_init_prefix = "vchan_con";
        vm1.vevent_global_endpoint = "vm1";
        vm0.kernel_cmdline = VM_GUEST_CMDLINE;
        vm0.kernel_image = C162_KERNEL_IMAGE;
        vm0.kernel_relocs = C162_KERNEL_IMAGE;
        vm0.initrd_image = C162_ROOTFS;
        vm0.iospace_domain = 0x0f;
        vm1.kernel_cmdline = VM_GUEST_CMDLINE;
        vm1.kernel_image = C162_KERNEL_IMAGE;
        vm1.kernel_relocs = C162_KERNEL_IMAGE;
        vm1.initrd_image = C162_ROOTFS;
        vm1.iospace_domain = 0x10;
        vm0_config.ram = [ [ 0x21000000,24 ] , [ 0x22000000 , 25 ] , [ 0x24000000 , 24 ] ];
        vm1_config.ram = [ [ 0x27000000,24 ] , [ 0x28000000 , 25 ] , [ 0x2A000000 , 24 ] ];
        vm0_config.ioports = [];
        vm1_config.ioports = [
            {"start":0x2f8, "end":0x2ff, "pci_device":0, "name":"COM2 Serial Port"},
            {"start":0x2e8, "end":0x2ef, "pci_device":0, "name":"COM4 Serial Port"},
            {"start":0x162e, "end":0x162f, "pci_device":0, "name":"PLD Registers"},
            {"start":0x378, "end":0x37f, "pci_device":0, "name":"PLD Discrete I/O"},
            {"start":0x3f0, "end":0x3f7, "pci_device":0, "name":"PLD Extended Discrete I/O"},
            {"start":0x160E, "end":0x160F, "pci_device":0, "name":"CANbus 1 Two address"},
            {"start":0x1680, "end":0x16A0, "pci_device":0, "name":"CANbus 1 Multi address"},
            {"start":0x161E, "end":0x161F, "pci_device":0, "name":"CANbus 2 Two address"},
            {"start":0x16C0, "end":0x16E0, "pci_device":0, "name":"CANbus 2 Multi address"},
            {"start":0xe000, "end":0xe01f, "pci_device":1, "name":"Some device"}
        ];
        vm0_config.irqs = [
            {"name":"USB", "source":23, "level_trig":1, "active_low":1, "dest":14}
        ];
        vm1_config.irqs = [
            {"name":"I2C", "source":18, "level_trig":1, "active_low":1, "dest":12},
            {"name":"Serial", "source":3, "level_trig":0, "active_low":0, "dest":3}
        ];
        vm0_config.pci_devices_iospace = 1;
        vm1_config.pci_devices_iospace = 1;
        vm0_config.pci_devices = [
            {"name":"USB",
                "bus":0, "dev":0x1d, "fun":0,
                "irq":"USB",
                "memory":[
                    {"paddr":0xf2c07000, "size":0x400, "page_bits":12},
                ],
            },
        ];
        vm1_config.pci_devices = [
            {"name":"I2C",
                "bus":0, "dev":0x1f, "fun":3,
                "irq":"I2C",
                "memory":[
                    {"paddr":0xf2c05000, "size":0x100, "page_bits":12},
                ],
            },
        ];
        vm0_config.init_cons = [
            {"init":"make_virtio_net", "badge":134479872, "irq":"virtio_net_notify"},
        ];
        vm1_config.init_cons = [
            {"init":"vchan_init_init", "badge":VM_PIC_BADGE_VCHAN_HAS_DATA, "irq":"vchan_interrupt"},
        ];
    }
}
