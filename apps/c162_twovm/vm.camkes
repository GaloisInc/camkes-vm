/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */

import <VM/vm.camkes>;
import <Echo/Echo.camkes>;
import "c162_vm.camkes";


assembly {
    composition {
        /* Our echo component */
        component Echo echo;
        /* UDP servers */
        component UDPServer udpserver0;
        component UDPServer udpserver1;
        /* Ethernet driver */
        component Ethdriver82580 ethdriver;
        component HWEthDriver82580 HWEthDriver;
        /* The VM sub component */
        component VM vm;

        /* Connect ethernet drivers to udpservers */
        connection seL4Ethdriver eth_driver0(from udpserver0.ethdriver, to ethdriver.client);
        connection seL4Ethdriver eth_driver1(from udpserver1.ethdriver, to vm.ethdriver_interface);

        /* Hardware resources for ethernet driver */
        connection seL4HardwareMMIO ethdrivermmio1(from ethdriver.EthDriver, to HWEthDriver.mmio);
        connection seL4IOAPICHardwareInterrupt hwethirq(from HWEthDriver.irq, to ethdriver.irq);

        /* UDP connections for echo server */
        connection seL4UDPRecv udp_echo_recv(from echo.echo_recv, to udpserver0.client_recv);
        connection seL4UDPSend udp_echo_send(from echo.echo_send, to udpserver0.client_send);
        connection seL4MultiSharedData udp_echo_send_buf(from echo.echo_send_buf, to udpserver0.client_send_buf);
        connection seL4MultiSharedData udp_echo_recv_buf(from echo.echo_recv_buf, to udpserver0.client_recv_buf);
        connection seL4GlobalAsynchCallback udp_echo_recv_ready(from udpserver0.client_recv_ready, to echo.echo_recv_ready);

        /* Second set of UDP connections for echo server */
        connection seL4UDPRecv udp_echo2_recv(from echo.echo2_recv, to udpserver1.client_recv);
        connection seL4UDPSend udp_echo2_send(from echo.echo2_send, to udpserver1.client_send);
        connection seL4MultiSharedData udp_echo2_send_buf(from echo.echo2_send_buf, to udpserver1.client_send_buf);
        connection seL4MultiSharedData udp_echo2_recv_buf(from echo.echo2_recv_buf, to udpserver1.client_recv_buf);
        connection seL4GlobalAsynchCallback udp_echo2_recv_ready(from udpserver1.client_recv_ready, to echo.echo2_recv_ready);
    }
    configuration {
        /* The attributes for the receive buffer represent the client ID
         * this needs to match the the 'echo_recv_attributes' to indicate that
         * the this is the buffer for that client */
        echo.echo_recv_buf_attributes = "1";
        echo.echo_recv_buf_shmem_size = 0x1000;

        /* attributes for echo receive RPC indicate a client ID. This needs
         * to be unique across all of the RPC connections to the udpserver0.client_recv */
        echo.echo_recv_attributes = "1";
        /* The UDP port that this interface will receive packets on */
        echo.echo_recv_port = 7;
        /* Provide a name for the endpoint used to notify when there are new packets
         * to poll for. This needs to be a valid C symbol, should match what is given
         * in 'echo_recv_ready_global_endpoint' and should otherwise be unqiue in the
         * whole system */
        echo.echo_recv_global_endpoint = "echo_recv_endpoint";
        echo.echo_recv_ready_global_endpoint = "echo_recv_endpoint";

        /* Set the port this UDP interface will send on over the network.
         * 'dest' is the port to send to, and 'source' is the 'return address'
         * or 'port of origin' that will be put into the packet */
        echo.echo_send_ports = { "source" : 7, "dest" : 7};
        /* Attributes for echo_send and echo_send_buf work exactly the same
         * as for echo_recv. In this case they are a different namespace as
         * recv and them also being 1 is purely coincidental and not required
         */
        echo.echo_send_attributes= "1";

        echo.echo_send_buf_attributes = "1";
        echo.echo_send_buf_shmem_size = 0x1000;

        echo.echo2_recv_buf_attributes = "2";
        echo.echo2_recv_buf_shmem_size = 0x1000;

        echo.echo2_recv_attributes = "2";
        echo.echo2_recv_port = 7;
        echo.echo2_recv_global_endpoint = "echo2_recv_endpoint";
        echo.echo2_recv_ready_global_endpoint = "echo2_recv_endpoint";

        echo.echo2_send_ports = { "source" : 7, "dest" : 7};
        echo.echo2_send_attributes= "2";

        echo.echo2_send_buf_attributes = "2";
        echo.echo2_send_buf_shmem_size = 0x1000;

        echo.timer_attributes = 5;
        echo.timer_global_endpoint = "echo_timer";
        echo.timer_complete_global_endpoint = "echo_timer";
        echo.heap_size = 0;

        udpserver0.num_client_recv_bufs = 8;
        udpserver0.udp_ip_addr = "10.13.1.215";
        udpserver0.multicast_addr = "0.0.0.0";
        udpserver0.ethdriver_attributes = "1";
        udpserver0.ethdriver_shmem_size = 0x1000;
        udpserver0.ethdriver_global_endpoint = "udpserver0_endpoint";
        udpserver0.ethdriver_mac = [6, 0, 0, 12, 13, 14];
        udpserver0.heap_size = 0;
        udpserver1.num_client_recv_bufs = 8;
        udpserver1.udp_ip_addr = "10.13.1.216";
        udpserver1.multicast_addr = "0.0.0.0";
        udpserver1.ethdriver_attributes = "2";
        udpserver1.ethdriver_shmem_size = 0x1000;
        udpserver1.ethdriver_global_endpoint = "udpserver1_endpoint";
        udpserver1.ethdriver_mac = [6, 0, 0, 13, 14, 15];
        udpserver1.heap_size = 0;
        HWEthDriver.mmio_attributes = "0xf1b80000:0x80000";
        HWEthDriver.mmio_paddr = 0xf1b80000;
        HWEthDriver.mmio_size = 0x80000;
        HWEthDriver.irq_attributes = "16,1,1";
        ethdriver.simple = true;
        ethdriver.cnode_size_bits = 12;
        ethdriver.iospaces = "0x12:0x1:0x0:0";
        ethdriver.iospace_id = 0x12;
        ethdriver.pci_bdf = "1:0.0";
        ethdriver.simple_untyped20_pool = 2;
        ethdriver.heap_size = 0x10000;
        ethdriver.dma_pool = 0x100000;
    }
}
