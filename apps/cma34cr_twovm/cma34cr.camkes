/*
 * Copyright 2014, NICTA
 *
 * This software may be distributed and modified according to the terms of
 * the GNU General Public License version 2. Note that NO WARRANTY is provided.
 * See "LICENSE_GPLv2.txt" for details.
 *
 * @TAG(NICTA_GPL)
 */


/*
 * Two VMs, with native ethernet and vchan. 
 */

#include <autoconf.h>
#include <configurations/vm.h>

component Init0 {
    uses Ethdriver ethdriver;
    VM_INIT_DEF()
}

component Init1 {
    include "vmm/vchan_sharemem.h";
    uses VchanInterface vchan_con;
    uses VchanInitInterface vchan_init;
    consumes VchanEvent vevent;
    dataport vchan_headers_t share_mem;
    VM_INIT_DEF()
}

component VM {

    /* We want to export the time interface up to our main spec */
    provides Timer time_server_timer;
    emits Notifcation time_server_complete;
    /* Also export an interface to the RTC */
    provides RTC rtc_interface;
    /* Export an interface for the shared ethdriver */
    provides Ethdriver ethdriver_interface;

    composition {
        VM_COMPOSITION_DEF()
        VM_PER_VM_COMP_DEF(0)
        VM_PER_VM_COMP_DEF(1)


        /* Vchan interface for communicating to native tasks */
        component Vchan vchan;
        component HelloWorld hello;
        /* Connect hello to the vchan component */
        connection seL4Notification vchan_event(from vchan.vevent_sv, to hello.vevent);
        connection seL4RPCCall hvchan(from hello.vchan_con, to vchan.vchan_com);
        connection seL4SharedData hvchan_sharemem_0(from hello.share_mem, to vchan.share_mem);
        /* Connect hello and vchan to the serial server (pretend to be vm1) */
        connection seL4RPCCall hserial(from hello.putchar, to serial.vm_putchar);
        connection seL4RPCCall vchanserial(from vchan.putchar, to serial.vm_putchar);
        /* Connect vm1 to the vchan component */
        connection seL4VChanInit vchan_init(from vm1.vchan_init, to vchan.vchan_init);
        connection seL4RPCCall vchan_(from vm1.vchan_con, to vchan.vchan_com);
        connection seL4SharedData vchan_sharemem(from vm1.share_mem, to vchan.share_mem);
        connection seL4GlobalAsynch vchan_event_init(from vchan.vevent_cl, to vm1.vevent);


        /* Ethernet driver that we share to Linux */
        component Ethdriver82574 ethdriver;
        component HWEthDriver82574 HWEthdriver;

        /* Hardware resources for the ethernet driver */
        connection seL4HardwareMMIO ethdrivermmio(from ethdriver.EthDriver, to HWEthdriver.mmio);
        connection seL4HardwareInterrupt hwethirq(from HWEthdriver.irq, to ethdriver.irq);
        /* Connect vm0 ethernet to the ethdriver */
        connection seL4Ethdriver ethdriver_con(from vm0.ethdriver, to ethdriver.client);
        /* Export the shared ethdrover */
        export ethdriver.client -> ethdriver_interface;

        /* Export the time server interface up */
        export time_server.the_timer -> time_server_timer;
        export time_server.timer_notification -> time_server_complete;

        /* Export the RTC up */
        export rtc.rtc -> rtc_interface;

    }
    configuration {
        VM_CONFIGURATION_DEF()
        VM_PER_VM_CONFIG_DEF(0, 2)
        VM_PER_VM_CONFIG_DEF(1, 3)
        vm0.simple_untyped24_pool = 6;
        vm0.heap_size = 0x10000;
        vm0.guest_ram_mb = 128;
        vm0.kernel_cmdline = VM_GUEST_CMDLINE;
        vm0.kernel_image = C162_KERNEL_IMAGE;
        vm0.kernel_relocs = C162_KERNEL_IMAGE;
        vm0.initrd_image = C162_ROOTFS;
        vm0.iospace_domain = 0x0f;
        vm0_config.ram = [ [ 0x20800000, 23 ], [ 0x21000000, 24 ], [ 0x22000000, 25 ], [ 0x24000000, 26]];
        vm0_config.pci_devices_iospace = 1;
        vm1.simple_untyped24_pool = 6;
        vm1.heap_size = 0x10000;
        vm1.guest_ram_mb = 128;
        vm1.kernel_cmdline = VM_GUEST_CMDLINE;
        vm1.kernel_image = C162_KERNEL_IMAGE;
        vm1.kernel_relocs = C162_KERNEL_IMAGE;
        vm1.initrd_image = C162_ROOTFS;
        vm1.iospace_domain = 0x10;
        vm1.vchan_init_dataport = "share_mem";
        vm1.vchan_init_prefix = "vchan_con";
        vm1.vchan_init_domain = 0;
        vm1_config.ram = [ [ 0x30800000, 23 ], [ 0x31000000, 24 ], [ 0x32000000, 25 ], [ 0x34000000, 26]];
        vm1_config.pci_devices_iospace = 1;

        /* Vchan components */
        hello.putchar_attributes = "1";
        hello.heap_size = 8192;
        vchan.putchar_attributes = "1";
        vchan.vevent_cl_badge = VAR_STRINGIZE(VM_PIC_BADGE_VCHAN_HAS_DATA);
        vchan.vevent_cl_global_endpoint = "vm1";
        vchan.heap_size = 8192;
        vm1.vchan_con_domain = 0;
        vm1.vchan_con_dataport = "share_mem";
        vm1.vevent_global_endpoint = "vm1";

        ethdriver.simple = true;
        ethdriver.cnode_size_bits = 12;
        ethdriver.iospaces = "0x11:0x5:0x0:0";
        ethdriver.iospace_id = 0x11;
        ethdriver.pci_bdf = "5:0.0";
        ethdriver.simple_untyped20_pool = 2;
        ethdriver.heap_size = 0x10000;
        ethdriver.dma_pool = 0x100000;

        HWEthdriver.mmio_paddr = 0xc0500000;
        HWEthdriver.mmio_size = 0x20000;
        HWEthdriver.irq_irq_type = "pci";
        HWEthdriver.irq_irq_ioapic = 0;
        HWEthdriver.irq_irq_ioapic_pin = 17;
        HWEthdriver.irq_irq_vector = 17;

        vm0.ethdriver_attributes = "1";
        vm0.ethdriver_global_endpoint = "vm0";
        vm0.ethdriver_badge = "134479872";
        vm0.ethdriver_mac = [6, 0, 0, 11, 12, 13];

        vm1_config.init_cons = [
            {"init":"vchan_init_init", "badge":VM_PIC_BADGE_VCHAN_HAS_DATA, "irq":"vchan_interrupt"},
        ];

        vm0_config.init_cons = [
            {"init":"make_virtio_net", "badge":134479872, "irq":"virtio_net_notify"},
        ];
    }
}
